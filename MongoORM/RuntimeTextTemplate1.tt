<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManager.ttinclude"#>
<#
var entityMgr = Manager.Create(Host, GenerationEnvironment);


entityMgr.StartHeader();
#>
using MongoDB.Bson;
using System;
using Test;

namespace Test
{
<#
entityMgr.EndBlock();
var currDir = Directory.GetCurrentDirectory();
XmlDocument doc = new XmlDocument();
string path = Path.Combine(currDir, "MongoORM/Entity.xml");
doc.Load(path);

List<string> listEntity = new List<string>();
foreach (XmlNode node in doc.SelectNodes("/Root/Entity"))
{
    listEntity.Add(node.Attributes["Name"].InnerText);
}

foreach (XmlElement node in doc.SelectNodes("/Root/Entity"))
{
    string className = node.Attributes["Name"].InnerText;
    string primaryKey= node.HasAttribute("PrimaryKey") ? node.Attributes["PrimaryKey"].InnerText : null;

    int propertyCount = node.SelectNodes("Property").Count;

	entityMgr.StartNewFile(className+".cs");
#>

    public class <#=className#>
    {
<#
    foreach (XmlElement nodeProperty in node.SelectNodes("Property|List|Dict"))
    {
        string propertyName = nodeProperty.Attributes["Name"].InnerText;
        if ("Property" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
            if (propertyName == primaryKey)
            {
#>
        public <#=propertyType#> <#=propertyName#> { get; set; }

<#
            }
            else
            {
#>
        private bool _<#=propertyName#>Dirty;
        private <#=propertyType#> _<#=propertyName#>;
        public <#=propertyType#> <#=propertyName#>
        {
            get => _<#=propertyName#>;
            set
            {
                if (value == _<#=propertyName#>)
                    return;

                _<#=propertyName#> = value;
                _<#=propertyName#>Dirty = true;
            }
        }
<#           
            }    
        }
        else if ("List" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
#>
        public readonly BsonList<<#=propertyType#>> <#=propertyName#> = new BsonList<<#=propertyType#>>();
<#
        }
        else if ("Dict" == nodeProperty.Name)
        {
            string keyType= nodeProperty.Attributes["KeyType"].InnerText;
            string valueType = nodeProperty.Attributes["ValueType"].InnerText;
#>
        public readonly BsonDictionary<<#=keyType#>, <#=valueType#>> <#=propertyName#> = new BsonDictionary<<#=keyType#>, <#=valueType#>>();
<#
        }
    }
#>

        public bool DataDirty
        {
            get
            {
<#
    foreach (XmlElement nodeProperty in node.SelectNodes("Property|List|Dict"))
        {
            string propertyName = nodeProperty.Attributes["Name"].InnerText;
            if ("Property" == nodeProperty.Name)
            {
                if (propertyName == primaryKey)
                    continue;
#>
                if (_<#=propertyName#>Dirty) return true;
<#
            }
            else if ("List" == nodeProperty.Name)
            {
                string propertyType = nodeProperty.Attributes["Type"].InnerText;
#>
                foreach (var item in <#=propertyName#>.ItemList)
                {
                    if (item.DataDirty)
                        return true;
<#
                if (listEntity.Contains(propertyType))
                {
#>
                    if (null !=  item.Value && item.Value.DataDirty)
                        return true;
<#
                }
#>
                }
<#
            }
            else if ("Dict" == nodeProperty.Name)
            {
                string keyType= nodeProperty.Attributes["KeyType"].InnerText;
                string valueType = nodeProperty.Attributes["ValueType"].InnerText;
#>
                if (<#=propertyName#>.Added.Count > 0 || <#=propertyName#>.Removed.Count > 0) return true;
<#
                if (listEntity.Contains(valueType))
                {
#>
                foreach (var pair in <#=propertyName#>)
                {
                    if (null != pair.Value && pair.Value.DataDirty)
                        return true;
                }
<#
                }
#>
<#
            }
        }
#>
                return false;
            }
        }

        public void ClearDirty()
        {
<#
    foreach (XmlElement nodeProperty in node.SelectNodes("Property|List|Dict"))
    {
        string propertyName = nodeProperty.Attributes["Name"].InnerText;
        if ("Property" == nodeProperty.Name)
        {
            if (propertyName == primaryKey)
                continue;
#>
            _<#=propertyName#>Dirty = false;
<#            
        }
        else if ("List" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
#>
            <#=propertyName#>.ClearDirty();
<#
            if (listEntity.Contains(propertyType))
            {
#>
            foreach (var item in <#=propertyName#>)
                item?.ClearDirty();
<#
            }
        }
        else if ("Dict" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["ValueType"].InnerText;
#>
            <#=propertyName#>.ClearDirty();
<#
            if (listEntity.Contains(propertyType))
            {
#>
            foreach (var pair in <#=propertyName#>)
                pair.Value?.ClearDirty();
<#
            }
        }
    }
#>
        }

        public static explicit operator BsonValue(<#=className#> item)
        {
            if (null == item)
                return BsonNull.Value;

            return (BsonDocument)item;
        }

        public static explicit operator BsonDocument(<#=className#> item)
        {
            if (null == item)
                return null;

            BsonDocument document = new BsonDocument();
<#
    foreach (XmlElement nodeProperty in node.SelectNodes("Property|List|Dict"))
    {
        string propertyName = nodeProperty.Attributes["Name"].InnerText;

        if ("Property" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
            if (propertyName == primaryKey)
            {
#>
            document.Add("_id", item.<#=propertyName#>);
<#
            }
            else
            {
#>
            if (default(<#=propertyType#>) != item._<#=propertyName#>)
                document.Add("<#=propertyName#>", item._<#=propertyName#>);
<#
            }
        }
        else if ("List" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
#>

            if (item.<#=propertyName#>.Count > 0)
            {
                BsonDocument bson<#=propertyName#> = new BsonDocument();
                for (int i = 0; i < item.<#=propertyName#>.Count; i++)
                {
                    var value = item.<#=propertyName#>.ItemList[i];
                    BsonDocument valueDoc = new BsonDocument();
                    valueDoc["PrevKey"] = value.PrevKey;
                    valueDoc["Value"] = (BsonValue)value.Value;
                    bson<#=propertyName#>[value.Key.ToString()] = valueDoc;
                }
                document.Add("<#=propertyName#>", bson<#=propertyName#>);
            }
<#
        } 
        else if ("Dict" == nodeProperty.Name)
        {
            string valueType = nodeProperty.Attributes["ValueType"].InnerText;
#>

            if (item.<#=propertyName#>.Count > 0)
            {
                BsonDocument bson<#=propertyName#> = new BsonDocument();
                foreach (var pair in item.<#=propertyName#>)
                    bson<#=propertyName#>.Add(pair.Key.ToString(), (BsonValue)pair.Value);
                document.Add("<#=propertyName#>", bson<#=propertyName#>);
            }
<#
        }
    }
#>
            return document;
        }

        public static explicit operator <#=className#>(BsonValue bsonValue)
        {
            if (bsonValue.IsBsonNull)
                return null;

            return (<#=className#>)bsonValue.AsBsonDocument;
        }

        public static explicit operator <#=className#>(BsonDocument document)
        {
            <#=className#> item = new <#=className#>();
            foreach (var field in document)
            {
                switch(field.Name)
                {
<#
    foreach (XmlElement nodeProperty in node.SelectNodes("Property|List|Dict"))
    {
        string propertyName = nodeProperty.Attributes["Name"].InnerText;

        if ("Property" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
            if (propertyName == primaryKey)
            {
#>
                    case "_id": item.<#=propertyName#> = (<#=propertyType#>)field.Value; break;
<#
            }
            else
            {
#>
                    case "<#=propertyName#>": item._<#=propertyName#> = (<#=propertyType#>)field.Value; break;
<#
            }
        }
        else if ("List" == nodeProperty.Name)
        {
            string propertyType = nodeProperty.Attributes["Type"].InnerText;
#>

                    case "<#=propertyName#>":
                        foreach (var pair in field.Value.AsBsonDocument)
                        {
                            BsonDocument valueDoc = pair.Value.AsBsonDocument;
                            int key = int.Parse(pair.Name);
                            int prevKey = (int)valueDoc["PrevKey"];
                            <#=propertyType#> element = (<#=propertyType#>)valueDoc["Value"];
                            item.<#=propertyName#>.Add(new BsonList<<#=propertyType#>>.Element(key, prevKey, element));
                        }
                        item.<#=propertyName#>.PostDeserialize();
                        break;
<#
        } 
        else if ("Dict" == nodeProperty.Name)
        {
            string keyType = nodeProperty.Attributes["KeyType"].InnerText;
            string valueType = nodeProperty.Attributes["ValueType"].InnerText;
            if (keyType == "string")
            {      
#>

                    case "<#=propertyName#>":
                        foreach (var pair in field.Value.AsBsonDocument)
                            item.<#=propertyName#>.Add(pair.Name, (<#=valueType#>)pair.Value);
                        break;
<#
            }
            else
            {
#>

                    case "<#=propertyName#>":
                        foreach (var pair in field.Value.AsBsonDocument)
                            item.<#=propertyName#>.Add(<#=keyType#>.Parse(pair.Name), (<#=valueType#>)pair.Value);
                        break;
<#
            }
        }
    }
#>
                }
            }
            return item;
        }

        public void Save(string path, MongoContext context)
        {
<#
    foreach (XmlElement nodeProperty in node.SelectNodes("Property|List|Dict"))
        {
            string propertyName = nodeProperty.Attributes["Name"].InnerText;

            if ("Property" == nodeProperty.Name)
            {
                string propertyType = nodeProperty.Attributes["Type"].InnerText;
                if (propertyName == primaryKey)
                    continue;
#>
            if (_<#=propertyName#>Dirty)
            {
                if (default(<#=propertyType#>) == _<#=propertyName#>)
                    context.Unset.Add($"{path}<#=propertyName#>", 1);       // 如果是默认值则删除该字段,正好解决string==null时的异常
                else
                    context.Set.Add($"{path}<#=propertyName#>", _<#=propertyName#>);
            }
<#
            }
            else if ("List" == nodeProperty.Name)
            {
                string propertyType = nodeProperty.Attributes["Type"].InnerText;
#>

            if (0 == <#=propertyName#>.Count && <#=propertyName#>.Removed.Count > 0)
            {
                context.Unset.Add($"{path}<#=propertyName#>", 1);
            }
            else
            {
                foreach (var key in <#=propertyName#>.Removed)
                {
                    context.Unset.Add($"{path}<#=propertyName#>.{key}", 1);
                }
                foreach (var element in <#=propertyName#>.ItemList)
                {
                    if (element.NewData)
                    {
                        BsonDocument valueDoc = new BsonDocument();
                        valueDoc["PrevKey"] = element.PrevKey;
                        valueDoc["Value"] = (BsonValue)element.Value;
                        context.Set.Add($"{path}<#=propertyName#>.{element.Key}", valueDoc);
                    }
                    else
                    {
                        if (element.PrevKeyDirty)
                            context.Set.Add($"{path}<#=propertyName#>.{element.Key}.PrevKey", element.PrevKey);

                        if (element.ValueDirty)
                            context.Set.Add($"{path}<#=propertyName#>.{element.Key}.Value", (BsonValue)element.Value);
<#
                if (listEntity.Contains(propertyType))
                {
#>
                        else if (null != element.Value)
                            element.Value.Save($"{path}<#=propertyName#>.{element.Key}.Value.", context);
<#
                }
#>
                    }
                }
            }
            
<#
            } 
            else if ("Dict" == nodeProperty.Name)
            {
                string keyType = nodeProperty.Attributes["KeyType"].InnerText;
                string valueType = nodeProperty.Attributes["ValueType"].InnerText;
#>

            if (0 == <#=propertyName#>.Count && <#=propertyName#>.Removed.Count > 0)
            {
                context.Unset.Add($"{path}<#=propertyName#>", 1);
            }
            else
            {
                foreach(var key in <#=propertyName#>.Removed)
                    context.Unset.Add($"{path}<#=propertyName#>.{key}", 1);
                foreach (var pair in <#=propertyName#>)
                {
                    if (<#=propertyName#>.Added.Contains(pair.Key))
                        context.Set.Add($"{path}<#=propertyName#>.{pair.Key}", (BsonValue)pair.Value);
<#
                if (listEntity.Contains(valueType))
                {
#>
                    else if (null != pair.Value)
                        pair.Value.Save($"{path}<#=propertyName#>.{pair.Key}.", context);
<#
                }
#>
                }
            }
<#
        }
    }
#>
        }
    }
}
<#
	entityMgr.EndBlock();
    }
    entityMgr.Process(true);
#>